version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            if((curl -H "token: 9b8e0f63-6af0-4ca0-bd2f-f6f0fd4226fa" --request GET https://api.memstash.io/values/ ))
            then
              SUCCESS = 1
            fi
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              cd backend
              npm run migrations:revert
              
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end build
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  scan-frontend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end build
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
           
          


  scan-backend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end build
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
           
           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: install tar gzip
          command: | 
           yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "aws ec2 describe-instances \
            \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text " >> .circleci/ansible/inventory.txt
             
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["2c:35:17:20:3e:af:38:8a:3b:f9:2d:fe:7e:51:c6:07"]
        - attach_workspace:
            at: project/.circleci/ansible/
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible 
              
        - run:
            name: Configure server
            command: |
                cd .circleci/ansible
                ansible-playbook -i inventory.txt configure-server.yml
              
        - destroy_environment     
  run-migrations:
      docker:
      - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build] 
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              # Run and sve the migration output
              npm run migrations > migrations_dump.txt
              
        - run:
            name: Send migration results to memstash
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl -H "Content-Type: text/plain" -H "token: 9b8e0f63-6af0-4ca0-bd2f-f6f0fd4226fa" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              fi
              
        - destroy_environment
        - revert-migrations        
  deploy-frontend:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout 
        - run:
            name: Install dependencies
            command: |
              yum update
              yum install python ansible nodejs npm awscli -y
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udacity" \
              --output text
              )
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy_environment
        - revert-migrations   
  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["2c:35:17:20:3e:af:38:8a:3b:f9:2d:fe:7e:51:c6:07"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible 
              apk add tar gzip nodejs npm 
        - run:
            name: Deploy backend
            command: |
              cd backend
              npm install
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy_environment
        - revert-migrations   
workflows:
  default:
    jobs:
      
      - build-frontend
      - build-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [deploy-backend]
      - deploy-backend:
          requires: [configure-infrastructure]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]